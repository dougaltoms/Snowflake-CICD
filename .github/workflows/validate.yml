# This is a basic workflow to help you get started with Actions
name: Validate
on:
  push:
    branches: 
      - 'dev_**' # Trigger the workflow to run on PUSH events to `dev_` branches
    paths:
      - '**.sql' # And only when the push affects a .sql files
  workflow_dispatch: # Option to run manually from UI too

jobs:
  validate:
    runs-on: ubuntu-latest # Need to investigate best practice here

    # A job comprises indivudal steps
    steps:
      # Checkout repo onto runner
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Set up Python env
      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10" # Think about version

      # Install required packages for linting
      # - name: Install SQLFluff
      #   run: pip install sqlfluff

      # Save names of all .sql files to loop through
      # Maybe these can be stored in variables rather than text file
      - name: Get SQL Scripts
        id: get-sql-scripts
        run: git ls-files '**.sql' > sql_scripts.txt

      # Likewise for deployment scripts
      - name: Get Deployment Scripts
        id: get-deployment-scripts
        run: |
          git ls-files '**/all_deployment_scripts/**.sql' > deployment_scripts.txt
          cat deployment_scripts.txt

      # Run validation python script
      # This uses custom linting rules with SQLFluff to validate scripts  
      - name: Execute validation.py
        id: validate
        run: python .github/workflows/validate.py

      # Save status of workflow to use in deploy.yml
      - name: Save status
        id: save_status
        run: "echo ::set-output name=status::success"

      # Upload status as artifact
      - name: Upload status
        id: upload_status
        uses: actions/upload-artifact@v3
        with:
          name: save_status
          path: .github/workflows/validation_status.txt
